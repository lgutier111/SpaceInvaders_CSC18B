package SpaceInvaders_V4.LevelEditor;

import SpaceInvaders_V4.Main.ResourceFactory;
import SpaceInvaders_V4.TileMap.EntityMap;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class EntityListEditor extends javax.swing.JFrame {

    //file chooser
    final JFileChooser fc;
    final FileFilter filter;

    //list of enemy entries
    private ArrayList<Entry> enemyList;
    //list of available class names
    private final String[] enemies = {"EnemyDart", "EnemySwarmer", "EnemyWasp", "EnemyBossOgre"};

    //constructory method
    public EntityListEditor() {
        //init file chooser
        this.filter = new FileNameExtensionFilter("ENEMIES file", "enemies");
        this.fc = new JFileChooser();
        this.fc.addChoosableFileFilter(filter);
        this.fc.setFileFilter(filter);

        //init components
        initComponents();
                setLocationRelativeTo(null);

        this.addWindowListener(new WindowAdapter() {

            @Override
            public void windowClosing(WindowEvent e) {
                close();
            }

        });
        //init arraylist and combobox
        enemyList = new ArrayList<>();
        for (String className : enemies) {
            ClassNameComboBox.addItem(className);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        DisplayList = new javax.swing.JList();
        SpawnTriggerLabel = new javax.swing.JLabel();
        ClassNameLabel = new javax.swing.JLabel();
        ClassNameComboBox = new javax.swing.JComboBox();
        SpawnReflLabel = new javax.swing.JLabel();
        SpawnRefField = new javax.swing.JTextField();
        RankLabel = new javax.swing.JLabel();
        SpawnXLabel = new javax.swing.JLabel();
        SpawnYLabel = new javax.swing.JLabel();
        CopyEntry = new javax.swing.JButton();
        AddEntry = new javax.swing.JButton();
        DeleteEntry = new javax.swing.JButton();
        EnemyListLabel = new javax.swing.JLabel();
        SpawnTriggerSpinner = new javax.swing.JSpinner();
        RankSpinner = new javax.swing.JSpinner();
        SpawnXSpinner = new javax.swing.JSpinner();
        SpawnYSpinner = new javax.swing.JSpinner();
        EditEntry = new javax.swing.JButton();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        MenuSave = new javax.swing.JMenuItem();
        MenuOpen = new javax.swing.JMenuItem();

        setTitle("Enemy List Editor");

        DisplayList.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        DisplayList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DisplayList.setToolTipText("List of Enemy Data");
        DisplayList.setVisibleRowCount(9);
        jScrollPane1.setViewportView(DisplayList);

        SpawnTriggerLabel.setText("spawnTrigger");

        ClassNameLabel.setText("enemyClassName");

        ClassNameComboBox.setToolTipText("Name of Enemy Class");

        SpawnReflLabel.setText("spawnRef");

        SpawnRefField.setToolTipText("Special flags for enemy class");

        RankLabel.setText("rank");

        SpawnXLabel.setText("spawnX");

        SpawnYLabel.setText("spawnY");

        CopyEntry.setText("◄");
        CopyEntry.setToolTipText("Copy Selected Entry From List");
        CopyEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyEntryActionPerformed(evt);
            }
        });

        AddEntry.setText("+");
        AddEntry.setToolTipText("Add Entry to list");
        AddEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddEntryActionPerformed(evt);
            }
        });

        DeleteEntry.setText("X");
        DeleteEntry.setToolTipText("Remove Selected Entry From list");
        DeleteEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteEntryActionPerformed(evt);
            }
        });

        EnemyListLabel.setFont(new java.awt.Font("Courier New", 0, 11)); // NOI18N
        EnemyListLabel.setText(" Index|Tpos   |ClassName       |Rank |Xpos |Ypos |Ref");

        SpawnTriggerSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(100)));
        SpawnTriggerSpinner.setToolTipText("Distance from Bottom of Map to trigger entity spawn");

        RankSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        RankSpinner.setToolTipText("Enemy Rank");

        SpawnXSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), null, null, Integer.valueOf(100)));
        SpawnXSpinner.setToolTipText("Horixontal position relative to curent map which to spawn enemy ");

        SpawnYSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), null, null, Integer.valueOf(100)));
        SpawnYSpinner.setToolTipText("Vertical position relative to screen which to spawn enemey");

        EditEntry.setText("►");
        EditEntry.setToolTipText("Edit Over Selected Entry");
        EditEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditEntryActionPerformed(evt);
            }
        });

        FileMenu.setText("File");

        MenuSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        MenuSave.setText("Save");
        MenuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuSaveActionPerformed(evt);
            }
        });
        FileMenu.add(MenuSave);

        MenuOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        MenuOpen.setText("Open");
        MenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuOpenActionPerformed(evt);
            }
        });
        FileMenu.add(MenuOpen);

        MenuBar.add(FileMenu);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SpawnTriggerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(SpawnRefField, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(ClassNameComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ClassNameLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addComponent(SpawnTriggerSpinner, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(SpawnReflLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RankLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SpawnYLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(SpawnXLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(RankSpinner)
                    .addComponent(SpawnXSpinner)
                    .addComponent(SpawnYSpinner))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(DeleteEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(CopyEntry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(EditEntry))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(EnemyListLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(EnemyListLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(AddEntry)
                            .addGap(18, 18, 18)
                            .addComponent(DeleteEntry)
                            .addGap(18, 18, 18)
                            .addComponent(CopyEntry)
                            .addGap(18, 18, 18)
                            .addComponent(EditEntry))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(SpawnTriggerLabel)
                                .addComponent(RankLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(SpawnTriggerSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(RankSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ClassNameLabel)
                                .addComponent(SpawnXLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(ClassNameComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SpawnXSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(25, 25, 25)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(SpawnReflLabel)
                                .addComponent(SpawnYLabel))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(SpawnRefField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(SpawnYSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void CopyEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyEntryActionPerformed
        copyEntry();
    }//GEN-LAST:event_CopyEntryActionPerformed

    private void AddEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddEntryActionPerformed
        addEntry();
    }//GEN-LAST:event_AddEntryActionPerformed

    private void DeleteEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteEntryActionPerformed
        deleteEntry();
    }//GEN-LAST:event_DeleteEntryActionPerformed

    private void MenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuOpenActionPerformed
        //show open file dialog
        int returnVal = fc.showOpenDialog(this);
        
        //if file opened, try to parse JSON data
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            //init file and parser
            JSONParser parser = new JSONParser();
            JSONObject jObj = new JSONObject();
            File file = fc.getSelectedFile();

            //read file
            try {
                Object obj = parser.parse(new FileReader(file));
                jObj = (JSONObject) obj;

            } catch (IOException | ParseException ex) {
                Logger.getLogger(EntityMap.class.getName()).log(Level.SEVERE, null, ex);

            }

            //parse enemyLisr from file
            JSONArray jsonList = (JSONArray) jObj.get("EnemyList");

            //if parse fail, show error dialog
            if (jsonList == null) {
                JOptionPane.showMessageDialog(this, "<html><h1>Error</h1><p>An Error Occurred Loading Data</p></html>", "Load Error", JOptionPane.ERROR_MESSAGE);
            } else if (jsonList.size() > 0) {//if parse success and array has content, extract data

                enemyList.clear();

                for (int i = 0; i < jsonList.size(); i++) {
                    JSONObject je = (JSONObject) jsonList.get(i);
                    enemyList.add(new Entry(
                            (int) (long) je.get("spawnTrigger"),
                            (int) (long) je.get("rank"),
                            (int) (long) je.get("spawnX"),
                            (int) (long) je.get("spawnY"),
                            (String) je.get("spawnRef"),
                            (String) je.get("enemyClassName")
                    ));
                    updateList();
                }
            } else {//else show fail dialog
                JOptionPane.showMessageDialog(this, "<html><h1>Alert</h1><p>No Data Found</p></html>", "Data Error", JOptionPane.INFORMATION_MESSAGE);
            }

        }
    }//GEN-LAST:event_MenuOpenActionPerformed

    private void MenuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuSaveActionPerformed
       //init json vars
        JSONObject jsonObj = new JSONObject();
        JSONArray jsonList = new JSONArray();

        //create json array from enemylist data
        for (Entry e : enemyList) {
            JSONObject je = new JSONObject();
            je.put("spawnTrigger", e.getSpawnTrigger());
            je.put("enemyClassName", e.getEnemyClassName());
            je.put("rank", e.getRank());
            je.put("spawnX", e.getSpawnX());
            je.put("spawnY", e.getSpawnY());
            je.put("spawnRef", e.getSpawnRef());

            jsonList.add(je);
        }
        
        //add json list to json object
        jsonObj.put("EnemyList", jsonList);
        
        //show save file dialog
        int returnVal = fc.showSaveDialog(this);
        
        // if file approved, write json object to file
        if (returnVal == JFileChooser.APPROVE_OPTION) {

            try {
                FileWriter file = new FileWriter(fc.getSelectedFile());
                file.write(jsonObj.toJSONString());
                file.flush();
                file.close();
            } catch (IOException ex) {
                Logger.getLogger(EntityListEditor.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_MenuSaveActionPerformed

    private void EditEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditEntryActionPerformed
        editEntry();
    }//GEN-LAST:event_EditEntryActionPerformed

    //sort list and update jlist display
    private void updateList() {
        
        //sort according to spawnTrigger field
        Collections.sort(enemyList, new Comparator<Entry>() {
            @Override
            public int compare(Entry e1, Entry e2) {
                if (e1.getSpawnTrigger() == e2.getSpawnTrigger()) {
                    return 0;
                }
                return e1.getSpawnTrigger() < e2.getSpawnTrigger() ? -1 : 1;
            }
        });

        //new string array
        String[] temp = new String[enemyList.size()];

        //populate array with arrayList data
        for (int i = 0; i < enemyList.size(); i++) {
            temp[i] = String.format(
                    "%04d |%06d |%-15s |%02d   |%04d |%04d |%-10s",
                    i,
                    enemyList.get(i).getSpawnTrigger(),
                    enemyList.get(i).getEnemyClassName(),
                    enemyList.get(i).getRank(),
                    enemyList.get(i).getSpawnX(),
                    enemyList.get(i).getSpawnY(),
                    enemyList.get(i).getSpawnRef());

        }
        //update jlist with new data
        DisplayList.setListData(temp);
    }

    //add form data from form fields to array list. Sort list and update jlist display.
    private void addEntry() {
        //create new entry and add it to arrayList
        Entry entry = new Entry((Integer) SpawnTriggerSpinner.getValue(), (Integer) RankSpinner.getValue(), (Integer) SpawnXSpinner.getValue(), (Integer) SpawnYSpinner.getValue(), SpawnRefField.getText(), enemies[ClassNameComboBox.getSelectedIndex()]);
        enemyList.add(entry);
        //sort and update JList display
        updateList();
    }

    //copy selected jlist index to form field
    private void copyEntry() {
        int i = DisplayList.getSelectedIndex();
        if (i >= 0) {
            SpawnTriggerSpinner.setValue(enemyList.get(i).getSpawnTrigger());
            RankSpinner.setValue(enemyList.get(i).getRank());
            SpawnXSpinner.setValue(enemyList.get(i).getSpawnX());
            SpawnYSpinner.setValue(enemyList.get(i).getSpawnY());
            SpawnRefField.setText(enemyList.get(i).getSpawnRef());
            ClassNameComboBox.setSelectedIndex(Arrays.asList(enemies).indexOf(enemyList.get(i).getEnemyClassName()));
        }
    }
    private void editEntry(){
        int i = DisplayList.getSelectedIndex();
        if (i >= 0) {
            enemyList.get(i).setSpawnTrigger((Integer) SpawnTriggerSpinner.getValue());
            enemyList.get(i).setRank((Integer) RankSpinner.getValue());
            enemyList.get(i).setSpawnX((Integer) SpawnXSpinner.getValue());
            enemyList.get(i).setSpawnY((Integer) SpawnYSpinner.getValue());
            enemyList.get(i).setSpawnRef( SpawnRefField.getText());
            enemyList.get(i).setEnemyClassName(enemies[ClassNameComboBox.getSelectedIndex()]);
            updateList();
            DisplayList.setSelectedIndex(i);
        } 
    }

    //remove selected JList entry from arrayList and JList Display
    private void deleteEntry() {
        int i = DisplayList.getSelectedIndex();
        if (i >= 0) {
            enemyList.remove(DisplayList.getSelectedIndex());
            updateList();
            DisplayList.setSelectedIndex(i);
        }
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(EntityListEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//        
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new EntityListEditor().setVisible(true);
//            }
//        });
//    }
//    

   //go back to game window
    private void close() {
        setVisible(false);
        ResourceFactory.get().getGameWindow().setVisable(true);
        ResourceFactory.get().getGameWindow().requestFocus();
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddEntry;
    private javax.swing.JComboBox ClassNameComboBox;
    private javax.swing.JLabel ClassNameLabel;
    private javax.swing.JButton CopyEntry;
    private javax.swing.JButton DeleteEntry;
    private javax.swing.JList DisplayList;
    private javax.swing.JButton EditEntry;
    private javax.swing.JLabel EnemyListLabel;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem MenuOpen;
    private javax.swing.JMenuItem MenuSave;
    private javax.swing.JLabel RankLabel;
    private javax.swing.JSpinner RankSpinner;
    private javax.swing.JTextField SpawnRefField;
    private javax.swing.JLabel SpawnReflLabel;
    private javax.swing.JLabel SpawnTriggerLabel;
    private javax.swing.JSpinner SpawnTriggerSpinner;
    private javax.swing.JLabel SpawnXLabel;
    private javax.swing.JSpinner SpawnXSpinner;
    private javax.swing.JLabel SpawnYLabel;
    private javax.swing.JSpinner SpawnYSpinner;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    
}

//entry class
class Entry {

    int spawnTrigger;
    int rank;
    int spawnX;
    int spawnY;
    String spawnRef;
    String enemyClassName;

    //constructor class
    //@param spawnTrigger distance from bottom of map that will trigger spawn of entity
    //@param rank of entity
    //@param spawnX horizontal position of entity spawn
    //@param spawnY vertical position of entity spawn
    //@param spawnRef special Flags
    //@param enemyClassName class name of entity to spawn
    Entry(int spawnTrigger, int rank, int spawnX, int spawnY, String spawnRef, String enemyClassName) {
        this.spawnTrigger = spawnTrigger;
        this.rank = rank;
        this.spawnX = spawnX;
        this.spawnY = spawnY;
        this.spawnRef = spawnRef;
        this.enemyClassName = enemyClassName;
    }

    int getSpawnTrigger() {
        return spawnTrigger;
    }

    void setSpawnTrigger(int spawnTrigger) {
        this.spawnTrigger = spawnTrigger;
    }

    int getRank() {
        return rank;
    }

    void setRank(int rank) {
        this.rank = rank;
    }

    int getSpawnX() {
        return spawnX;
    }

    void setSpawnX(int spawnX) {
        this.spawnX = spawnX;
    }

    int getSpawnY() {
        return spawnY;
    }

    void setSpawnY(int spawnY) {
        this.spawnY = spawnY;
    }

    String getSpawnRef() {
        return spawnRef;
    }

    void setSpawnRef(String spawnRef) {
        this.spawnRef = spawnRef;
    }

    String getEnemyClassName() {
        return enemyClassName;
    }

    void setEnemyClassName(String enemyClassName) {
        this.enemyClassName = enemyClassName;
    }

}
